/**************************************************************************************************
 *
 * Linear Delta Robot: Indirect Cinematic
 *
 **************************************************************************************************/

/* maxima -b delta.mac */

/**************************************************************************************************/

/* Define some functions */
vector(x, y, z):= transpose(matrix([x, y, z]));
magnitude(x):= dotproduct(x, x); 

/**************************************************************************************************/

assume(z1 > z, z2 > z, z3 > z);
assume(rho > 0, L > 0, L > rho);
solve(subst(0, x, subst(0, y, Eq1)), z);

/* Nacelle coordinate */
N: vector(x, y, z);

/* Axis angle */
theta: 2*%pi/3;

/* Rotation matrix for each axis */
R1: matrix([1,0,0],
           [0,1,0],
	   [0,0,1]);

R2: matrix([cos(theta),-sin(theta),0],
	   [sin(theta),cos(theta),0],
           [0,0,1]);

R3: matrix([cos(theta),sin(theta),0],
           [-sin(theta),cos(theta),0],
           [0,0,1]);

/* Ball joint Point */
P1: R1 . vector(rho, 0, z1);
P2: R2 . vector(rho, 0, z2);
P3: R3 . vector(rho, 0, z3);

/* System of equations */
Eq1: L^2 = magnitude(N-P1);
Eq2: L^2 = magnitude(N-P2);
Eq3: L^2 = magnitude(N-P3);

/* Indirect Cinematic Zi functions  */
Z1: part(solve(Eq1, z1), 2, 2);
Z2: part(solve(Eq2, z2), 2, 2);
Z3: part(solve(Eq3, z3), 2, 2);

/**************************************************************************************************/
